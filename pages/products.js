import { getSession } from 'next-auth/react';
import dynamic from 'next/dynamic';
import Head from 'next/head';
import { useState, useEffect, Suspense } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import LoadingSpinner from '../components/LoadingSpinner';

import {
	deleteSelectedProductsAsync,
	getProductsAsync
} from '../redux/features/productSlice';

const AllProducts = dynamic(() => import('../components/AllProducts'), {
	suspense: true
});

function Products({ data }) {
	const dispatch = useDispatch();
	const products = useSelector((state) => state.products.products);
	const [allProducts, setAllProducts] = useState([]);
	const [selectedItems, setSelectedItems] = useState([]);

	useEffect(() => {
		dispatch(getProductsAsync(data?.user?.email));
	}, []);

	const handleDeleteSelected = () => {
		dispatch(deleteSelectedProductsAsync(selectedItems));
		setSelectedItems([]);
	};

	return (
		<div className="container mx-auto">
			<Head>
				<title>Products</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			{products.length > 0 && (
				<p className="text-2xl text-center m-5">Search Bar</p>
			)}

			{selectedItems.length > 0 && (
				<div className="text-center">
					<button
						onClick={handleDeleteSelected}
						className=" text-white justify-center align-center bg-red-700 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm md:text-md lg:text-md px-5 py-2 text-center dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-800"
					>
						Remove selected products
					</button>
				</div>
			)}
			<div className="flex flex-wrap ">
				<Suspense
					fallback={
						<p className="text-2xl text-center mx-auto">
							<LoadingSpinner size={7} />
						</p>
					}
				>
					{products.map((product, idx) => (
						<AllProducts
							key={idx}
							product={product}
							setSelectedItems={setSelectedItems}
							selectedItems={selectedItems}
						/>
					))}
				</Suspense>
			</div>
			{products?.length === 0 && (
				<p className=" text-lg md:text-2xl lg:text-2xl  text-center mx-auto mt-5">
					No Products to show, please add new product
				</p>
			)}
		</div>
	);
}

export default Products;

export const getServerSideProps = async (context) => {
	const { req } = context;
	const session = await getSession({ req });

	if (!session) {
		return {
			redirect: { destination: '/auth/login' }
		};
	}
	console.log(session);
	return {
		props: { data: session }
	};
};
